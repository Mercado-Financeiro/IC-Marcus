version: '3.8'

services:
  # ML Model API Service
  ml-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      args:
        MODEL_VERSION: ${MODEL_VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: crypto-ml-api
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=/app/artifacts/mlruns
      - MODEL_NAME=${MODEL_NAME:-crypto_xgb}
      - MODEL_STAGE=${MODEL_STAGE:-Production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_WORKERS=${MAX_WORKERS:-4}
    volumes:
      - ../artifacts:/app/artifacts
      - ../logs:/app/logs
      - ../data:/app/data:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ml-network

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.0
    container_name: mlflow-server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - ../mlflow:/mlflow
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow/mlflow.db
      --default-artifact-root /mlflow/artifacts
    restart: unless-stopped
    networks:
      - ml-network

  # Streamlit Dashboard
  dashboard:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: crypto-ml-dashboard
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ../artifacts:/app/artifacts:ro
      - ../data:/app/data:ro
    command: ["streamlit", "run", "src/dashboard/app.py"]
    depends_on:
      - mlflow
    restart: unless-stopped
    networks:
      - ml-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: crypto-ml-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - ml-network

  # PostgreSQL for production data
  postgres:
    image: postgres:15-alpine
    container_name: crypto-ml-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crypto_ml
      - POSTGRES_USER=${DB_USER:-mluser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ml-network

networks:
  ml-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: