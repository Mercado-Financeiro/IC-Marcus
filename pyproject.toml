[project]
name = "ml-finance-crypto"
version = "0.1.0"
description = "Pipeline ML para trading de criptomoedas com XGBoost e LSTM"
requires-python = ">=3.11"
authors = [{name = "Marcus", email = "marcus@example.com"}]
readme = "README.md"
license = {text = "MIT"}

dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "torch>=2.0.0",
    "optuna>=3.0.0",
    "mlflow>=2.0.0",
    "pandera>=0.17.0",
    "pydantic-settings>=2.0.0",
    "structlog>=23.0.0",
    "streamlit>=1.28.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "shap>=0.43.0",
    "python-binance>=1.0.17",
    "ccxt>=4.0.0",
    "ta>=0.10.0",
    "yfinance>=0.2.0",
    "jupyterlab>=4.0.0",
    "jupytext>=1.15.0",
    "ipykernel>=6.25.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.90.0",
    "ruff>=0.1.0",
    "black>=23.10.0",
    "mypy>=1.6.0",
    "bandit[toml]>=1.7.5",
    "pre-commit>=3.5.0",
    "pip-tools>=7.3.0",
    "pip-audit>=2.6.0",
    "gitleaks>=8.18.0"
]

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "T20"]
ignore = ["E501", "S101"]
exclude = [".git", "__pycache__", "build", "dist", ".venv", "notebooks"]

[tool.black]
line-length = 100
target-version = ["py311"]
exclude = '''
/(
    \.git
  | __pycache__
  | build
  | dist
  | \.venv
  | notebooks
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["notebooks", "tests"]

[tool.bandit]
exclude_dirs = ["tests", "notebooks", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-ra -q --strict-markers"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as asyncio tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.jupytext]
formats = "ipynb,py:percent"
notebook_metadata_filter = "-all"