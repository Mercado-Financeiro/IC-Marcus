version: '3.8'

services:
  # Dashboard service
  dashboard:
    build:
      context: .
      target: dashboard
    container_name: ml-trading-dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data:ro
      - ./artifacts:/app/artifacts:ro
      - ./configs:/app/configs:ro
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow tracking server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.9.2
    container_name: ml-trading-mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./artifacts/mlruns:/mlflow/mlruns
      - ./artifacts/mlflow-artifacts:/mlflow/artifacts
    environment:
      - MLFLOW_BACKEND_STORE_URI=file:///mlflow/mlruns
      - MLFLOW_ARTIFACTS_LOCATION=/mlflow/artifacts
    command: >
      mlflow server
      --backend-store-uri file:///mlflow/mlruns
      --default-artifact-root file:///mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    networks:
      - trading-network
    restart: unless-stopped

  # Paper trading service
  paper-trader:
    build:
      context: .
      target: trader
    container_name: ml-trading-paper-trader
    volumes:
      - ./data:/app/data:ro
      - ./artifacts:/app/artifacts
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - TRADING_MODE=paper
    networks:
      - trading-network
    restart: unless-stopped
    depends_on:
      - mlflow

  # Training service (run on demand)
  training:
    build:
      context: .
      target: training
    container_name: ml-trading-training
    volumes:
      - ./data:/app/data
      - ./artifacts:/app/artifacts
      - ./configs:/app/configs
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    networks:
      - trading-network
    profiles:
      - training
    depends_on:
      - mlflow

  # API service (optional)
  api:
    build:
      context: .
      target: api
    container_name: ml-trading-api
    ports:
      - "8000:8000"
    volumes:
      - ./artifacts/models:/app/artifacts/models:ro
      - ./configs:/app/configs:ro
    env_file:
      - .env
    networks:
      - trading-network
    restart: unless-stopped
    profiles:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development environment
  dev:
    build:
      context: .
      target: development
    container_name: ml-trading-dev
    ports:
      - "8888:8888"  # Jupyter
      - "8502:8501"  # Streamlit (dev)
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - trading-network
    profiles:
      - dev
    stdin_open: true
    tty: true

  # Redis cache (optional)
  redis:
    image: redis:7-alpine
    container_name: ml-trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - trading-network
    restart: unless-stopped
    profiles:
      - cache

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: ml-trading-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=trading_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - trading-network
    restart: unless-stopped
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  trading-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: