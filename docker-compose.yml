version: '3.8'

services:
  # MLflow tracking server
  mlflow:
    image: python:3.11-slim
    container_name: mlflow-server
    command: >
      sh -c "pip install mlflow boto3 psycopg2-binary &&
             mlflow server --backend-store-uri sqlite:///mlflow.db
                          --default-artifact-root /mlflow-artifacts
                          --host 0.0.0.0
                          --port 5000"
    ports:
      - "5000:5000"
    volumes:
      - mlflow-data:/mlflow-artifacts
      - mlflow-db:/mlflow.db
    environment:
      - MLFLOW_TRACKING_URI=http://0.0.0.0:5000
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streamlit dashboard
  dashboard:
    build:
      context: .
      dockerfile: ./deployment/Dockerfile
    container_name: ml-dashboard
    command: streamlit run src/dashboard/app.py --server.port 8501 --server.address 0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src:ro
      - ./configs:/app/configs:ro
      - ./data:/app/data:ro
      - ./artifacts:/app/artifacts
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
    depends_on:
      - mlflow
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API server for model serving
  api:
    build:
      context: .
      dockerfile: ./deployment/Dockerfile
    container_name: ml-api
    command: python -m src.api.server
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src:ro
      - ./configs:/app/configs:ro
      - ./artifacts/models:/app/artifacts/models:ro
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PYTHONPATH=/app
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    depends_on:
      - mlflow
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jupyter notebook server for development
  jupyter:
    image: jupyter/scipy-notebook:python-3.11
    container_name: ml-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./src:/home/jovyan/src:ro
      - ./data:/home/jovyan/data
      - ./artifacts:/home/jovyan/artifacts
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PYTHONPATH=/home/jovyan
    networks:
      - ml-network
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''

  # PostgreSQL database for production MLflow backend (optional)
  postgres:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    environment:
      - POSTGRES_DB=mlflow
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ml-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ml-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ml-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ml-network
    depends_on:
      - api
      - mlflow

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ml-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    networks:
      - ml-network
    depends_on:
      - prometheus

networks:
  ml-network:
    driver: bridge

volumes:
  mlflow-data:
  mlflow-db:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: