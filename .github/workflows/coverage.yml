name: Test Coverage Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: false

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-coverage-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-coverage-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install TA-Lib
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
        pip install TA-Lib
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-xdist coverage[toml]

    - name: Configure test environment
      run: |
        # Disable GPU for tests
        echo "CUDA_VISIBLE_DEVICES=-1" >> $GITHUB_ENV
        echo "TF_CPP_MIN_LOG_LEVEL=2" >> $GITHUB_ENV

        # Create test directories
        mkdir -p tests/temp
        mkdir -p logs
        mkdir -p htmlcov
        mkdir -p core/data

    - name: Run tests with coverage
      run: |
        # Run all tests with coverage, excluding problematic files
        python -m pytest tests/ \
          --cov=core \
          --cov-report=xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing:skip-covered \
          --cov-report=term \
          --cov-config=.coveragerc \
          --ignore=tests/unit/core/ml/models/test_lstm_model.py \
          --ignore=tests/integration/test_end_to_end_pipeline_improved.py \
          --ignore=tests/robustness/test_fault_injection_advanced.py \
          --tb=short \
          --maxfail=10 \
          -v || true

    - name: Generate coverage report
      run: |
        # Generate detailed coverage report
        coverage report --precision=2
        coverage json

        # Extract coverage percentage
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
        echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV

        # Create badge
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 40" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV

        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "**Total Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage by Module" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        coverage report --skip-covered --skip-empty >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          coverage.json
          htmlcov/

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60

    - name: Check coverage threshold
      run: |
        # Fail if coverage is below minimum threshold
        MIN_COVERAGE=30  # Start with low threshold, increase gradually
        if (( $(echo "$COVERAGE_PERCENT < $MIN_COVERAGE" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE_PERCENT}% is below minimum threshold of ${MIN_COVERAGE}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE_PERCENT}% meets minimum threshold of ${MIN_COVERAGE}%"
        fi

  coverage-diff:
    name: Coverage Diff Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 20

    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        lfs: false

    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
        path: base
        lfs: false

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage diff-cover

    - name: Generate coverage for PR branch
      run: |
        # Generate coverage for current PR
        pip install -r requirements.txt
        pip install pytest pytest-cov
        python -m pytest tests/ --cov=core --cov-report=xml:coverage-pr.xml \
          --ignore=tests/unit/core/ml/models/test_lstm_model.py \
          --ignore=tests/integration/test_end_to_end_pipeline_improved.py \
          --ignore=tests/robustness/test_fault_injection_advanced.py \
          -q || true

    - name: Generate coverage for base branch
      run: |
        cd base
        pip install -r requirements.txt
        pip install pytest pytest-cov
        python -m pytest tests/ --cov=core --cov-report=xml:../coverage-base.xml \
          --ignore=tests/unit/core/ml/models/test_lstm_model.py \
          --ignore=tests/integration/test_end_to_end_pipeline_improved.py \
          --ignore=tests/robustness/test_fault_injection_advanced.py \
          -q || true
        cd ..

    - name: Generate diff coverage report
      run: |
        diff-cover coverage-pr.xml --compare-branch=origin/${{ github.base_ref }} \
          --html-report=diff-coverage.html \
          --markdown-report=diff-coverage.md

    - name: Upload diff coverage report
      uses: actions/upload-artifact@v4
      with:
        name: diff-coverage-report
        path: |
          diff-coverage.html
          diff-coverage.md

    - name: Add diff coverage to PR summary
      run: |
        echo "## Coverage Diff Report" >> $GITHUB_STEP_SUMMARY
        cat diff-coverage.md >> $GITHUB_STEP_SUMMARY
