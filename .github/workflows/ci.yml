name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  CACHE_NUMBER: 0  # Increment to reset cache

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
      
      - name: Run Ruff
        run: ruff check . --fix --exit-non-zero-on-fix
      
      - name: Run Black
        run: black --check .
      
      - name: Run MyPy
        run: mypy src --ignore-missing-imports

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit
      
      - name: Run Bandit
        run: bandit -r src -ll
      
      - name: Run Safety
        run: safety check --json
        continue-on-error: true
      
      - name: Run pip-audit
        run: pip-audit
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, regression, validation]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          pytest tests/${{ matrix.test-type }}/ -v --cov=src --cov-report=xml --cov-report=term
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    strategy:
      matrix:
        target: [base, dashboard, api, training]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.target }}-
            ${{ runner.os }}-buildx-
      
      - name: Build ${{ matrix.target }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          tags: ml-trading-${{ matrix.target }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  validate-models:
    name: Validate ML Models
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-validate-${{ env.CACHE_NUMBER }}-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Check model determinism
        run: |
          python -c "
          import numpy as np
          import random
          import os
          
          # Set seeds
          os.environ['PYTHONHASHSEED'] = '42'
          np.random.seed(42)
          random.seed(42)
          
          print('âœ… Determinism configured')
          "
      
      - name: Validate model thresholds
        run: |
          python -c "
          # Model quality thresholds
          MIN_F1 = 0.4
          MIN_PR_AUC = 0.4
          MIN_ROC_AUC = 0.5
          MAX_BRIER = 0.5
          
          print(f'Quality gates:')
          print(f'  F1 > {MIN_F1}')
          print(f'  PR-AUC > {MIN_PR_AUC}')
          print(f'  ROC-AUC > {MIN_ROC_AUC}')
          print(f'  Brier < {MAX_BRIER}')
          "

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, validate-models]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment steps here
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
      
      - name: Notify deployment
        run: |
          echo "Deployment complete!"
          # Add notification (Slack, email, etc.)